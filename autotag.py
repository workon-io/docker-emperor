import os
import sys
import re
import subprocess


if __name__ == "__main__":

    try:
        revision = sys.argv[1]
    except:
        revision = 'revision'
    
    version_py = os.path.join(os.path.dirname(__file__), 'docker_emperor/__init__.py')
    version = re.search(r'__version__ = "([\d\.]+)"', open(version_py, 'r').read()).group(1)
    print('Current version: {}'.format(version))


    has_changes = 'la copie de travail est propre' not in str(subprocess.check_output(["git", "status"]).rstrip())
    if has_changes:

        major, medium, minor = version.split(".")

        if revision == 'minor':
            minor = int(minor) + 1

        elif revision == 'medium':
            medium = int(medium) + 1
            minor = 0

        elif revision == 'major':
            major = int(major) + 1
            medium = 0
            minor = 0

        else:
            minor = int(minor) + 1

        new_version = "{}.{}.{}".format(major, medium, minor)
        print('New version: {}'.format(new_version))


        comment = raw_input('Comment: ')
        comment = comment.strip()
        if not comment:
            comment = 'autotagging'
        comment = comment.replace('"','\\"')


        version_msg = "# Do not edit this file, pipeline versioning is governed by git tags" + os.linesep + "# following PEP 386"
        open(version_py, 'w').write(version_msg + os.linesep + '__version__ = "%s"\n__comment__ = """%s"""' % (new_version, comment))

        print(subprocess.check_output(["git", "add", "."]))
        print(subprocess.check_output(["git", "commit", "-am", '"%s"' % comment]))
        print(subprocess.check_output(["git", "tag", "-a", new_version, '-m', '"%s"' % comment]))

    else:
        print('No changes')